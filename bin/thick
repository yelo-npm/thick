#!/usr/bin/env node

var fs = require('fs')
,	program = require('commander')
,	fs = require('fs')
,	_ = require('lodash')
,	thick = require('../')
,	path = require('path')
,	defaults = require('../lib/config')
;

var options = {};

program
	.version(thick.version)
	.usage('[options] [dir]')
	.option('-o, --out <dir>', 'output of the compiled files ['+defaults.directories.out+']',String)
	.option('-d, --dev <boolean>', 'dev mode (debug & log) ['+defaults.options.dev+'] ',Boolean)
	.option('-c, --config <file>', 'specifies a config file to use [./thick.js]',String,'./thick.js')
	.option('-p, --port <port>', 'specify test server port ['+defaults.options.port+']',Number)
	.option('-w, --write', 'compile files to out directory ['+defaults.options.write+']',Boolean)
	.option('-b, --build', 'compiles all files to out dir before anything ['+defaults.options.build+']',Boolean)
	.option('-e, --exit', 'exits right after building (no server) ['+defaults.options.exit+']',Boolean)
	;

program.on('--help', function(){
	console.log('  version '+thick.version);
	console.log('  use thick to serve jade,less, and other template files and compile them on the fly');
	console.log('  you can pass more options by creating a local ./thick.js file');
	console.log('  config options are overwritten by command-line options');
	console.log('');
	console.log('  Examples:');
	console.log('');
	console.log('    # create test server and begin watching local dir for changes');
	console.log('    $ thick ./');
	console.log('    (note that you do not have to specify the local directoy)');
	console.log('');
	console.log('    # write files in ./out on change (directory must exist)');
	console.log('    $ thick -o ./out -c ./');
	console.log('');
	console.log('    # compile all files in ./out and exit');
	console.log('    $ thick -o ./out -be');
	console.log('');
});

program.parse(process.argv);

if(fs.existsSync(program.config)){
	options = require(process.cwd()+'/'+program.config.replace(/^.\//,''));
}

if(!options.directories){options.directories = {};}
if(program.args.length && program.args[0]){options.directories.root = program.args[0];}
if(program.hasOwnProperty('out')){options.directories.out = program.out;}

if(!options.options){options.options = {};}
if(program.hasOwnProperty('dev')){options.options.dev = program.dev;}
if(program.hasOwnProperty('port')){options.options.port = program.port;}
if(program.hasOwnProperty('write')){options.options.write = program.write;};
if(program.hasOwnProperty('build')){options.options.build = program.build;};
if(program.hasOwnProperty('exit')){options.options.exit = program.exit;};

thick.run(options);